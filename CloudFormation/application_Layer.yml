AWSTemplateFormatVersion: 2010-09-09
Description: Application_Layer Template

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
  DBInstanceIdentifier:
    Type: String
  DBInstanceType:
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
  DBSubnetGroupDescription:
    Type: String
  S3BucketName:
    Type: String

# EC2
Resources:
  lecture10:
    Type: AWS::EC2::Instance
    Properties:
      NetworkInterfaces:
        - SubnetId: !ImportValue NetworkLayer-PublicSubnet1a
          GroupSet:
            - !ImportValue SecurityLayer-lecture10sg
          DeviceIndex: 0
      InstanceType: !Ref InstanceType
      ImageId: ami-027a31eff54f1fe4c
      Tags:
        - Key: Name
          Value: lecture10
      KeyName: raizetech-ec2-1.1
      IamInstanceProfile: !Ref IamInstanceProfile
  
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

# Secrets Managet
  RDSSecret: 
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "RDSSecret"
      Description: "RDS password for my RDS instance"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
# RDS
  lecture10rds:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: "lecture10rds"
      AllocatedStorage : 20
      DBInstanceClass: !Ref DBInstanceType
      Port: 3306
      StorageType: gp2
      BackupRetentionPeriod: 1
      MasterUsername: admin
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:password}}'
      DBName: lecture10rds
      Engine: mysql
      EngineVersion: 8.0.33
      DBSubnetGroupName: !Ref lecture10RDSSubnetgroup
      MultiAZ: false
      VPCSecurityGroups:
        - !ImportValue SecurityLayer-lecture10rdssg

  lecture10RDSSubnetgroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "My RDS Subnet Group"
      DBSubnetGroupName: lecture10RDSSubnetgroup
      SubnetIds:
        - !ImportValue NetworkLayer-PrivateSubnet1a
        - !ImportValue NetworkLayer-PrivateSubnet1c

  lecture10ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: lecture10ALB
      Scheme: internet-facing
      SecurityGroups:
        - !ImportValue SecurityLayer-SecurityGroupALB
      Subnets:
        - !ImportValue NetworkLayer-PublicSubnet1a
        - !ImportValue NetworkLayer-PublicSubnet1c
      Tags:
        - Key: Name
          Value: lecture10ALB

# ALBのターゲットグループの指定
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ALBTargetGroup
      Port: 80
      Protocol: HTTP
      Targets:
        - Id:
            Ref: lecture10
          Port: 80
      VpcId: !ImportValue NetworkLayer-lecture10

# ALBのリスナーの指定
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            !Ref ALBTargetGroup
      LoadBalancerArn:
        !Ref lecture10ALB
      Port: 80
      Protocol: HTTP
#S3
  lecture10mura03s3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: lecture10mura03s3
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
  lecture10mura03s3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref lecture10mura03s3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/EC2InstanceRole"
            Action: "s3:*"
            Resource: !Sub "arn:aws:s3:::lecture10mura03s3/*"
#IAMロール
  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EC2InstanceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3FullAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource: "*"